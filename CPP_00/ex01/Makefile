#------ TARGET ------#
NAME		:= my_awesome_phonebook
#------ WFLAGS ------#
D_FLAGS		= -Wall -Wextra -std=c++98 -Werror
INCLUDES	+= -I includes/
#------ SRC FILES & DIRECTORIES ------#
SRCS_DIR	:= src/
SRCS		:=	Contact.cpp \
				Phonebook.cpp 
#				main.cpp
PROJECT_ROOT:= $(abspath $(dir $(lastword $(MAKEFILE_LIST)))/../)
GIT_REPO	:=$(abspath $(dir $(lastword $(MAKEFILE_LIST)))/../..)
CURRENT		:= $(shell basename $$PWD)
#------ DEBUG ------#
D		?= 0
#------ Sanitizer ------#
S			?= 0
#------ DEBUG UTILS ------#
CC			:= c++
MAKEFLAGS	+= --no-print-directory
VALGRIND	:= valgrind -s --leak-check=yes --show-leak-kinds=all
HELGRIND	:= valgrind -s --tool=helgrind
MAC_LEAKS	:= leaks -atExit --
BUILD_DIR	:= .build/
DEBUG_DIR	:= $(NAME).dSYM

#------ ADDING DEBUG FLAGS ------#
ifneq ($(D), 0)
CC			= g++
SRCS		+= main.cpp
D_FLAGS		+= -DDEBUG=$(D_BUG)
endif
ifeq ($(S), 0)
#MAKEFLAGS	+= --debug
OBJS		:= $(addprefix $(SRCS_DIR), $(SRCS))
else
#------ CODE FOR OBJECT FILES ------#
SRCS		:= $(SRCS:%=$(SRC_DIR)%)
OBJS		:= $(SRCS:$(SRC_DIR)%.c=$(BUILD_DIR)%.o)
DEPS		:= $(OBJS:.o=.d)
#------ INCLUDE SANATIZER FLAGS ------#
D_FLAGS		+= -O0 -g3 
D_FLAGS		+= -fsanitize=address,undefined
endif
#-------------------- RULES ----------------------------#
all: $(NAME)
$(NAME): $(OBJS)
ifneq ($(S), 0)
	@printf "$(LF)\nüöÄ $(P_BLUE)Successfully Created $(P_YELLOW)$(NAME)'s Object files üöÄ$(FG_TEXT)\n"
endif
	@printf "\n"
	@printf "$(LF)üìö $(P_BLUE)Create $(P_GREEN)$@ üìö\n"
	@echo $(GREEN)
	@printf "$(CC) $(D_FLAGS) $(INCLUDES) $^ -o $@ \n\n";
	@$(CC) $(D_FLAGS) $(INCLUDES) -pthread  $^ -o $(NAME)
	@printf "\n$(LF)üéâ $(P_BLUE)Successfully Created $(P_GREEN)$@! üéâ\n$(P_NC)"
	@echo $(BANNER)
ifneq ($(S), 0)
$(OBJS): $(BUILD_DIR)%.o : $(SRCS_DIR)%.c | $(BUILD_DIR)
	@$(CC) $(D_FLAGS) $(INCLUDES) -MMD -MP -c $< -o $@
	@printf "$(LF)üöß $(P_BLUE)Creating $(P_YELLOW)$@ $(P_BLUE)from $(P_YELLOW) $< $(FG_TEXT)"

$(BUILD_DIR):
	@mkdir -p $@
endif
clean:
	@echo $(RED)
	@if [ -d "$(BUILD_DIR)" ]; then	\
		rm -rf $(BUILD_DIR); 		\
		printf "$(LF)üßπüóëÔ∏è $(P_RED) Clean $(P_YELLOW)$(NAME)'s Object files$(P_NC)\n"; \
	fi
	@if [ -d "$(DEBUG_DIR)" ]; then	\
		rm -rf $(DEBUG_DIR); 		\
	fi
	@printf  "\n$(P_NC)"

fclean: clean
	@if [ -f "$(NAME)" ]; then	\
		printf "$(LF)üßπüóëÔ∏è $(P_RED) Clean $(P_GREEN) $(CURRENT)/$(NAME)\n";	\
		rm -rf $(NAME);														\
		echo $(TRASH_BANNER);												\
	else																	\
		printf "$(LF)üßπüóëÔ∏è $(P_RED) Clean $(P_GREEN) $(CURRENT)\n";			\
	fi
	@printf "\n$(P_NC)"

re:     fclean all

.PHONY: all clean fclean re
#------------- TEST UTILS -----------------------------------#
t:$(NAME)
	@echo $(BOLD) ./$(NAME) $(E_NC)
	@./$(NAME)
	@echo $(BOLD) ./$(NAME) Damnit " ! " "Sorry students, I thought this thing was off."$(E_NC)
	@./$(NAME) Damnit " ! " "Sorry students, I thought this thing was off."
# start: $(NAME)
# 	@echo $(GREEN)./$(NAME) $(arg) $(E_NC)
# 	$(if $(arg), -./$(NAME) $(arg), \
# 		@printf "Input Example: \n\t make start arg=\"write something here\"\n")
val: $(NAME)
	@echo $(RED) $(VALGRIND) $(MAKE) t $(E_NC)
	@$(VALGRIND) ./$(NAME)
	@$(VALGRIND) ./$(NAME) Damnit " ! " "Sorry students, I thought this thing was off."

# #-------------------- GIT UTILS ----------------------------#
test:
	@echo $(PROJECT_ROOT)
	@echo $(GIT_REPO)
	@echo $(CURRENT)
gAdd:
	@echo $(CYAN) && git add $(PROJECT_ROOT)
gCommit:
	@echo $(GREEN) && git commit -e
gPush:
	@echo $(YELLOW) && git push
git:
	@ls -la $(GIT_REPO) | grep Makefile
	@if [ -f "$(GIT_REPO)/Makefile" ]; then	\
		$(MAKE) -C $(GIT_REPO) fclean gAdd gCommit gPush;		\
	else									\
		$(MAKE) -C $(PROJECT_ROOT) fclean gAdd gCommit gPush;	\
fi
gQuick:fclean gAdd
	@git status --porcelain -b -s > $(GIT_REPO)/msg_template
	@git commit -F $(GIT_REPO)/msg_template
	@rm $(GIT_REPO)/msg_template
	$(MAKE) gPush
#--------------------COLORS----------------------------#
CL_BOLD = \e[1m
RAN = \033[48;5;237m\033[38;5;255m
NC = \033[m
P_RED = \e[1;91m
P_GREEN = \e[1;32m
P_BLUE = \e[0;36m
P_YELLOW = \e[1;33m
P_CCYN = \e[0;1;36m
P_NC = \e[0m
LF = \e[1K\r$(P_NC)
FG_TEXT = $(P_NC)\e[38;2;189;147;249m

BOLD = "\033[1m"
CROSS = "\033[8m"
RED = "\033[1;91m"
GREEN = "\033[1;32m"
BLUE = "\033[1;34m"
YELLOW = "\033[1;33m"
E_NC	= "\033[m"
CYAN = "\033[0;1;36m"
BANNER = "$$CPP"
TRASH_BANNER = "$$TRASH"


define CPP

		$(RAN)‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚¢ü‚°ã‚£á‚†ß‚£π‚¢∞‚°õ‚°ª‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø$(NC)
		$(RAN)‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚°ü‚£ç‚°ö‚¢¶‚°π‚£∞‚°ô‚¢¶‚¢£‚¢ù‚°∏‚°Ö‚¢Ø‚°õ‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø$(NC)
		$(RAN)‚£ø‚£ø‚£ø‚£ø‚¢ø‚°ã‚¢ß‚¢£‚†≥‚£å‚£ì‚¢£‚°ï‚¢¶‚°ô‚¢Æ‚¢ú‚£ä‚†∂‚°ô‚¢¶‚°π‚¢ú‚°™‚¢ù‚°ª‚£ø‚£ø‚£ø‚£ø$(NC)
		$(RAN)‚£ø‚¢ü‚°ç‚¢é‚°ñ‚†≠‚°é‚£ï‚¢´‚°î‚¢Æ‚£ë‚£™‚£•‚£ø‚£¨‚£∂‚£ç‚£ñ‚°π‚¢Ü‚°≥‚£©‚¢ú‚¢£‚¢é‚†µ‚£©‚¢õ‚¢ø$(NC)
		$(RAN)‚£ô‚†≤‚°ú‚££‚¢ö‚°µ‚¢©‚°í‚£ß‚£º‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ß‚£ß‚°±‚¢é‚°£‚¢é‚°≥‚†ú‚†ò‚†ò$(NC)
		$(RAN)‚£å‚†≥‚£ç‚†ñ‚££‚†é‚£á‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚£ã‚†º‚†Å‚†Å‚†Ä‚†Ä‚†Ä$(NC)
		$(RAN)‚£å‚†≥‚£¨‚°ô‚¢¶‚£π‚£ø‚£ø‚£ø‚£ø‚£ø‚¢ü‚°õ‚¢ß‚°π‚†ú‚£ú‚†ª‚°ª‚£ø‚°ø‚†ü‚†ã‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä$(NC)
		$(RAN)‚£å‚†≥‚°Ü‚°ù‚¢¶‚£Ω‚£ø‚£ø‚£ø‚£ø‚†ü‚¢¶‚°ô‚¢¶‚°ì‚¢Ω‚°®‚†ì‚†Å‚†â‚†Ä‚†Ä‚†Ä‚£Ä‚†Ä‚†Ä‚†Ä‚£Ä‚†Ä‚†Ä$(NC)
		$(RAN)‚£å‚¢≥‚°©‚¢û‚£°‚£ø‚£ø‚£ø‚£ø‚£ø‚£ô‚¢¶‚°ô‚†¶‚†ô‚†Ç‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†∞‚†∂‚£ø‚†∂‚†Ä‚†∂‚£ø‚†∂‚†Ä$(NC)
		$(RAN)‚£å‚†≥‚£å‚°ì‚¢¶‚¢ª‚£ø‚£ø‚£ø‚£ø‚£é‚†í‚†â‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°Ä‚†Ä‚†Ä‚†Ä‚†â‚†Ä‚†Ä‚†Ä‚†â‚†Ä‚†Ä$(NC)
		$(RAN)‚£å‚†≥‚£¨‚†π‚£å‚¢ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£¶‚£Ñ‚°Ä‚†Ä‚†Ä‚†Ä‚£Ä‚£¥‚£ø‚£∑‚£¶‚£Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä$(NC)
		$(RAN)‚£å‚†≥‚¢Ü‚°õ‚†å‚†Ä‚†à‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä$(NC)
		$(RAN)‚°®‚†ã‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ô‚†ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ø‚†ã‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä$(NC)
		$(RAN)‚£ø‚£¶‚£Ñ‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚†ô‚†õ‚†õ‚†õ‚†õ‚†ã‚†â‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£Ä‚£¥‚£ø$(NC)
		$(RAN)‚£ø‚£ø‚£ø‚£ø‚£∂‚£§‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£†‚£∂‚£ø‚£ø‚£ø‚£ø$(NC)
		$(RAN)‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚£¶‚£Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚£¥‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø$(NC)
		$(RAN)‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∂‚£Ñ‚°Ä‚†Ä‚†Ä‚¢Ä‚£†‚£∂‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø$(NC)

endef
export CPP
define TRASH

		$(RAN)‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø$(NC)
		$(RAN)‚£ø‚£ø‚£ø‚£ø‚£ø‚°ü‚†ª‚†ø‚£õ‚°õ‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø$(NC)
		$(RAN)‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∂‚£∂‚£¨‚£ç‚£ô‚¢ª‚£ø‚£ø‚£ø‚£ø‚£ø$(NC)
		$(RAN)‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚†Ä‚°Ñ‚¢†‚†Ä‚°§‚†Ä‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø$(NC)
		$(RAN)‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚†Ä‚°á‚¢∏‚†Ä‚°á‚†Ä‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø$(NC)
		$(RAN)‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†Ä‚£∑‚¢∏‚†Ä‚°á‚¢∞‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø$(NC)
		$(RAN)‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£á‚£à‚£à‚£Ä‚£Å‚£º‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø$(NC)
		$(RAN)‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø$(NC)
		$(RAN)‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø$(NC)

endef
export TRASH