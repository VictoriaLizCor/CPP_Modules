#include "Utils.hpp"



/**
 * @brief Prints the given string to the standard error stream if the DEBUG flag is enabled.
 *
 * @param eColor The color of the string.
 * @param str The string to be printed.
 */
void debug(int eColor, std::string str)
{
	if (DEBUG)
		std::cerr << getColorStr(eColor, str);
}


/**
 * @brief Formats a string with color for console output.
 *
 * This function takes a message string, a color code, and a boolean error flag.
 * It returns the message string formatted with the specified color. If the error
 * flag is true, it prepends "ERROR:" to the message and sets the color to red,
 * regardless of the specified color code.
 *
 * @param msg The message string to be formatted.
 * @param color The color code for the message. This should be a value from the
 *			  t_color enum.
 * @param err A boolean flag indicating whether the message is an error message.
 * @return The formatted message string.
 */
std::string	getColorFmt(int eColor)
{
	std::ostringstream strColor;
	std::string	fmt;

	fmt = C_FMT;
	if (eColor < 0)
		eColor = DEFAULT;
	if (eColor > FGRAY)
		fmt += "1;";
	strColor << fmt << eColor << "m";
	return (strColor.str());
}

/**
 * Generates an error message with optional formatting.
 *
 * @param str The error message to be displayed.
 * @param bold A boolean value indicating whether the error message should be
 * displayed in bold.
 * @return The formatted error message.
 */
std::string error(std::string str, bool bold)
{
	std::ostringstream strColor;
	std::string	fmt;

	fmt = C_FMT;
	if (bold)
		fmt += "1;";
	strColor << fmt << FRED << "m"
	<< "ERROR: " << str << C_END;
	return (strColor.str());
}

/**
 * @brief Converts an integer value to a string.
 * 
 * @param value The integer value to be converted.
 * @return std::string The string representation of the integer value.
 */
std::string toStr(int value)
{
	std::ostringstream ss;
	ss << value;
	return (ss.str());
}

/**
 * Concatenates the given color string with the input string and the default color string.
 * 
 * @param eColor The color string to be concatenated.
 * @param str The input string to be concatenated.
 * @return The concatenated string with the color string and the default color string.
 */
std::string	getColorStr(std::string const& eColor, std::string const& str)
{
	return (eColor + str + std::string(C_END));
}

/**
 * Returns a string with the specified color formatting applied.
 *
 * @param eColor The color code to apply to the string.
 * @param str The input string.
 * @return The formatted string with the specified color.
 */
std::string	getColorStr(int eColor, std::string const& str)
{
	std::ostringstream os;
	os << getColorFmt(eColor) << str << C_END;
	return (os.str());
}

/**
 * @brief Generates an RGB color string for terminal output.
 *
 * Constructs a string that represents an RGB color using ANSI escape codes.
 * This string can be used to set text color in terminal outputs. The function
 * takes three integers representing the red, green, and blue components of the
 * color, each in the range [0, 255].
 *
 * @param red The red component of the color, [0, 255].
 * @param green The green component of the color, [0, 255].
 * @param blue The blue component of the color, [0, 255].
 * @return std::string The ANSI escape code string for the RGB color.
 */
static std::string	rColorRGB(int red, int green, int blue)
{
	std::ostringstream ss;

	ss << FLRGB << ";2;";
	ss << red << ";" << green << ";" << blue << "m";
	return (ss.str());
}

/**
 * Generates a random integer between the given minimum and maximum values.
 *
 * @param min The minimum value for the random number (inclusive).
 * @param max The maximum value for the random number (inclusive).
 * @return A random integer between the minimum and maximum values.
 */
int ft_rand(int min, int max)
{
	static bool seeded = false;
	if (!seeded)
	{
		srand(static_cast<unsigned int>(time(0)));
		seeded = true;
	}
	if (min < 0 || min > 256|| max < 0 || max > 256)
		return (255);
	return (rand() % (max - min + 1) + min);
}

/**
 * @brief Generate a colored string with optional bold formatting.
 * 
 * @param bold Whether to apply bold formatting.
 * @return std::string The colored string.
 * strColor << fmt
	<< rColorRGB(ft_rand(80, 200), ft_rand(80, 200), ft_rand(80, 200));
 */
std::string getRandomColorFmt(bool bold)
{
	std::ostringstream strColor;

	strColor << C_FMT;
	if (bold)
		strColor << + "1;";
	strColor << rColorRGB(ft_rand(60, 255), ft_rand(60, 255), ft_rand(60, 255));
	return (strColor.str());
}

/**
 * @brief Generates a color shade based on the given color and pattern.
 * 
 * This function takes an integer value representing the color and pattern, and returns a string
 * representing the generated color shade. The color shade is generated by appending the color and
 * pattern values to a string stream and returning the resulting string.
 * 
 * @param eColor The integer value representing the color.
 * @param pattern The integer value representing the pattern.
 * @return A string representing the generated color shade.
 */
std::string	getColorShade(int eColor, int pattern)
{
	std::ostringstream strColor;

	strColor << C_FMT << eColor;
	if (toStr(pattern).find_first_of("68") == std::string::npos)
		return (strColor.str() + "m");
	strColor << ";" << pattern << "m";
	return (strColor.str());
}

/**
 * @brief Returns a string representing the color shade based on the given color code.
 * 
 * @param eColor The color code.
 * @return std::string The color shade string.
 */
std::string	getColorShade(int eColor)
{
	std::ostringstream strColor;
	static int pattern = -1;

	pattern++;
	if (toStr(pattern).find_first_of("68") != std::string::npos)
		pattern++;
	strColor << C_FMT << eColor;
	if (pattern != 0)
		strColor << ";" << pattern;
	strColor << "m";
	if (pattern > 9)
		pattern = 0;
	return (strColor.str());
}

/**
 * @brief Sets the color name based on the provided color code.
 * 
 * @param color The color code.
 * @return std::string The color name.
 */
std::string setObjColor(int const& color)
{
	if (DEBUG == 0)
	{
		if ((color > FWHITE && color < BGRAY ) || color > 107)
			return(getRandomColorFmt(1));
		return (getColorFmt(color));
	}
	else
		return (getRandomColorFmt(1));
}


void printTitle(std::string title, int n, char c)
{
	int size = n;
	std::string toPrint;

	if (!title.empty())
		toPrint = " " + title + " "; 

	if (size <= 0 || size > 60)
		size = 60;
	int len = static_cast<int>(toPrint.size());
	int padding = (size - len) / 2;

	if (len % 2 != 0 && size % 2 == 0)
		padding++;

	std::cout << std::setfill(c) << std::setw(padding) << "";
	std::cout << toPrint;
	std::cout << std::setfill(c) << std::setw(size - len - padding)
	<< "" << std::endl;
}
