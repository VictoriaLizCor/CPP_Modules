#!/bin/bash
COMMIT_MSG_FILE="$1"
# Read the commit message from the file
commit_msg=$(cat "$COMMIT_MSG_FILE")
echo -e "$commit_msg \n"

# Read the second line from the commit-msg file
second_line=$(sed -n '2p' "$COMMIT_MSG_FILE")
# Regex pattern to match and capture the string after "* [A-Z]:"
# regex_pattern="^\* (Fix|Update in files|Docs|Feat|Style|Test|Refactor): (.*)"
regex_pattern="^\*\s*(.*?)\s*:"

# Check if the second line matches the regex pattern
if [[ $second_line =~ $regex_pattern ]]; then
    # Extract the string after the pattern
	prefix="${BASH_REMATCH[1]}"
	str3="${BASH_REMATCH[2]}"
	regex_after_prefix="^\*\s*$prefix\s*:\s*(.*)"
	if [[ $second_line =~ $regex_after_prefix ]]; then
		# Extract the string after the prefix
		string_after_prefix="${BASH_REMATCH[1]}"
		echo -e "MSG: $string_after_prefix \n"
		if [ -z "$string_after_prefix" ]; then
			echo -e "No changes \n"
			exit 1
		fi
	fi
	exit 0
else
    echo -e "The second line does not match the specified pattern. \n\n"
	exit 1
fi


# LINES=()
# while IFS= read -r line; do
# 	LINES+=("$line")
# done < "$COMMIT_MSG_FILE"
# # Define the regular expression pattern to match the "* [A-Z]:" part and capture everything after it
# regex_pattern="^\* \[A-Z\]: (.*)"

# # regex_pattern="^\* (Fix|Update in files|Docs|Feat|Style|Test|Refactor): (.*)"
# matching_lines=$(echo "${LINES[1]}" | grep -E "$regex_pattern")
# echo -e "$matching_lines\n"
# echo -e "${LINES[1]}\n"
# # Corrected regex check using [[ ]] and =~
# if [[ "${LINES[1]}" =~ $regex_pattern ]]; then
#     # Extract the content after "* [A-Z]:"
#     content_after_pattern="${BASH_REMATCH[1]}"  # Corrected to use [1] since it's the first capture group
#     echo "Content after pattern: $content_after_pattern"
    
#     # Compare the extracted content with the default message to see if it was modified
#     default_message="~ Autor: Victoria Lizarraga (@VictoriaLizCor / @lilizarr) ~"
#     if [[ "$content_after_pattern" != "$default_message" ]]; then
#         echo "The commit message was modified after the specified pattern."
#     else
#         echo "The commit message was not modified after the specified pattern."
#     fi
# else
#     echo "The specified pattern was not found in the commit message."
#     exit 1  # Exit with failure status if the pattern is not found
# fi
# Check if the commit message contains the specified content
# if [[ $commit_msg =~ $regex_pattern ]]; then
#     # Extract the content after "* [A-Z]:"
#     content_after_pattern="${BASH_REMATCH[2]}"
#     echo "Content after pattern: $content_after_pattern"
    
#     # Compare the extracted content with the default message to see if it was modified
#     default_message="~ Autor: Victoria Lizarraga (@VictoriaLizCor / @lilizarr) ~"
#     if [[ "$content_after_pattern" != "$default_message" ]]; then
#         echo "The commit message was modified after the specified pattern."
#     else
#         echo "The commit message was not modified after the specified pattern."
#     fi
# else
#     echo "The specified pattern was not found in the commit message."
#     exit 1  # Exit with failure status if the pattern is not found
# fi

# Check if commit_msg was modified
# if [[ "$commit_msg" != "$original_commit_msg" ]]; then
# 	echo -e "$commit_msg \n"
# 	exit 0
# else
# 	echo "NO changes made"
# 	exit 1
# fi