#!/bin/bash
COMMIT_MSG_FILE="$1"
# Read the commit message from the file
commit_msg=$(cat "$COMMIT_MSG_FILE")

# Get the last commit message
last_commit_msg=$(git log -1 --pretty=%B)

# echo -e "$last_commit_msg \n"
# Check if the commit message is the same as the last commit
if [[ "$commit_msg" =~ "$last_commit_msg" ]]; then
	echo -e "\033[0;35mNo changes \n \033[m"
	exit 1
fi
echo -e "----\n$commit_msg \n---------\n"

LINES=()
while IFS= read -r line; do
	LINES+=("$line")
done < "$COMMIT_MSG_FILE"

# Read the second line from the commit-msg file
second_line=${LINES[1]}
# Regex pattern to match and capture the string after "* [A-Z]:"
# regex_pattern="^\* (Fix|Update in files|Docs|Feat|Style|Test|Refactor): (.*)"
regex_pattern="^\*\s*(.*?)\s*:"

# Check if the second line matches the regex pattern
if [[ $second_line =~ $regex_pattern ]]; then
	# Extract the string after the pattern
	prefix="${BASH_REMATCH[1]}"
	#echo -e "BASH_REMATCH[0]: ${BASH_REMATCH[0]}\n\n"
	#echo -e "PREFIX: $prefix \n\n"
	regex_after_prefix="^\*\s*$prefix\s*:\s*(.*)"
	if [[ $second_line =~ $regex_after_prefix ]]; then
		# Extract the string after the prefix
		string_after_prefix="${BASH_REMATCH[1]}"
		# echo -e "MSG: $string_after_prefix \n\n"
		if [ -z "$string_after_prefix" ]; then
			echo -e "\033[0;35mNo changes after '${BASH_REMATCH[0]}' \n \033[m"
			exit 1
		fi
	fi
	exit 0
else
	echo -e "---\n$second_line\n-----\n"
	echo -e "\033[0;35mThe second line does not match the specified pattern. \n\n \033[m"
	exit 1
fi
