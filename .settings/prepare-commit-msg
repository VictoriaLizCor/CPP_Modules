#!/bin/bash

# Gets the commit message received as parameter and the current branch name.
COMMIT_MSG_FILE=$1
message=$(cat "$COMMIT_MSG_FILE")

# if [ -f .git/MERGE_HEAD ]; then
#	 echo "Merging the following branches:"
#	 while read -r commit_hash; do
#		 branch_name=$(git name-rev --name-only $commit_hash)
#		 echo "- $branch_name"
#	 done < .git/MERGE_HEAD
# fi
# head -n 1 .git/FETCH_HEAD | awk '{print $(NF-3), $(NF-2), $(NF-1), $NF}'
# git branch -r --contains "$(cat .git/MERGE_HEAD)"

branchName=$(git symbolic-ref --short HEAD)
# The Ticket ID prefix you want to include to your commit messages.
BranchTicket1=$(git symbolic-ref --short HEAD | sed -nE 's,([A-Z]?-?[0-9]+)-.+,\1,p')
BranchTicket2=$(git symbolic-ref --short HEAD | sed -nE 's,.+-([0-9]+),\1,p')

if [ -z "$BranchTicket1" ] || [ -z "$BranchTicket2" ]; then
	ticketID=$(echo "[$branchName]")
else
	ticketID=$(echo "[$BranchTicket1-$BranchTicket2]")
fi
# [cpp00ex02(TICKET:#0001)]
# Read the commit message into an array
LINES=()
while IFS= read -r line; do
	LINES+=("$line")
done < "$COMMIT_MSG_FILE"

# Check if the commit message already contains the TicketID
if [[ $message == *"$ticketID"* ]]; then
	# If it does, don't modify the commit message
	exit 0
fi

# Capture the merge branch information
mergeBranch=""
if [ -f .git/MERGE_HEAD ]; then
	mergeBranchName=$(git branch --contains $(cat .git/MERGE_HEAD) | sed 's/.* //' | tr -d '\n')
	mergeBranch="* Merge:"
	#mergeBranch="* Merge: $mergeBranchName of github.com:VictoriaLizCor/CPP_Modules into $branchName"
fi

# Modify the commit message
if [ "${#LINES[@]}" -eq 1 ]; then
	if [ -n "$mergeBranch" ]; then
		echo -e "$ticketID\n$mergeBranch\n${LINES[0]}" > "$COMMIT_MSG_FILE"
	else
		modified_files=$(git diff --cached --name-only --diff-filter=M | awk 'NR > 1 {print prev","} {prev=$0} END {print $0}')
		echo -e "FILES:$modified_files"
		# echo -e "FILES:$(git diff --name-only --diff-filter=M )"
		printf "%s\n%s\n" "$ticketID" "${LINES[0]}" > "$COMMIT_MSG_FILE"
	fi
else
	if [ -n "$mergeBranch" ]; then
		printf "%s\n%s%s\n" "$ticketID" "$mergeBranch" "${LINES[@]}"> "$COMMIT_MSG_FILE"
		#printf "%s\n" "${LINES[@]}" >> "$COMMIT_MSG_FILE"
	else
		printf "%s\n" "$ticketID \n ${LINES[@]} " > "$COMMIT_MSG_FILE"
		#printf "%s\n" "${LINES[@]}" >> "$COMMIT_MSG_FILE"
	fi
fi
regex_pattern="~ Autor: Victoria Lizarraga (@VictoriaLizCor / @lilizarr) ~"
if [[ ! $message =~ $regex_pattern ]]; then
	echo "~ Autor: Victoria Lizarraga (@VictoriaLizCor / @lilizarr) ~" >> "$COMMIT_MSG_FILE"
fi
# mergeBranch=""
# if [ -f .git/MERGE_HEAD ]; then
# 	mergeBranch=" < Merge $(cat .git/MERGE_HEAD | cut -d ' ' -f1 | xargs git rev-parse --abbrev-ref HEAD)"
# fi

# # Check if the commit message file has only one line
# if [ "${#LINES[@]}" -eq 1 ]; then
# 	# If the commit message file has only one line, prepend the ticketID to the commit message
# 	if [ -n "$mergeBranch" ]; then
# 		echo -e "$ticketID $mergeBranch\n${LINES[0]}" > "$COMMIT_MSG_FILE"
# 	else
# 		echo -e "$ticketID\n${LINES[0]}" > "$COMMIT_MSG_FILE"
# 	fi
# else
# 	# If the commit message file has more than one line, keep the original commit message
# 	if [ -n "$mergeBranch" ]; then
# 		printf "%s\n" "${LINES[0]}" "$ticketID $mergeBranch" "${LINES[@]:1}" > "$COMMIT_MSG_FILE"
# 	else
# 		printf "%s\n" "$ticketID" "${LINES[@]:1}" > "$COMMIT_MSG_FILE"
# 	fi
# fi
# Check if the commit message file has only one line
# if [ "${#LINES[@]}" -eq 1 ]; then
# 	# If the commit message file has only one line, prepend the ticketID to the commit message
# 	echo -e "$ticketID $mergeBranch\n${LINES[0]}" > "$COMMIT_MSG_FILE"
# else
# 	# If the commit message file has more than one line, keep the original commit message
# 	 printf "%s\n" "${LINES[0]}" "$ticketID $mergeBranch" "${LINES[@]:1}" > "$COMMIT_MSG_FILE"
# fi
# ////////////////////////////////////////