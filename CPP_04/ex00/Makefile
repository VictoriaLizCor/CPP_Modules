#------ TARGET ------#
NAME		:= $(notdir $(CURDIR))
#------ WFLAGS ------#
D_FLAGS		= -Wall -Wextra -std=c++98 -Werror -Wno-unused-function -Wshadow -Wunused
INCLUDES	+= -I include/
#------ SRC FILES & DIRECTORIES ------#
SRC_DIR		:= src/
SRC			:=  $(shell find $(SRC_DIR) -name '*.cpp' ! -name 'main.cpp')
PROJECT_ROOT:= $(abspath $(dir $(lastword $(MAKEFILE_LIST)))/../)
GIT_REPO	:=$(abspath $(dir $(lastword $(MAKEFILE_LIST)))/../..)
DIRS		:= $(abspath $(dir $(shell find $(PROJECT_ROOT) -name Makefile | sort)))
CURRENT		:= $(shell basename $$PWD)
DEBUG_FILES	:= debug
#------ DEBUG FLAG ------#
D			= 0
#------ Sanitizer Flag ------#
S			= 0
#------ DEBUG UTILS ------#
CXX			:= c++
MAKEFLAGS	+= --no-print-directory #--jobs
VALGRIND	:= valgrind -s --leak-check=yes --show-leak-kinds=all -q 
HELGRIND	:= valgrind -s --tool=helgrind
MAC_LEAKS	:= leaks -atExit --
BUILD_DIR	:= .build/
DEBUG_DIR	:= $(NAME).dSYM

#------ ADDING DEBUG FLAGS ------#
ifneq ($(D), 0)
CXX			= g++
SRC			+= $(shell find $(DEBUG_FILES) -name '*.cpp')
INCLUDES	+= -I $(DEBUG_FILES)/include
D_FLAGS		+= -DDEBUG=$(D)
D_FLAGS		+= -Wconversion -Wsign-conversion -pedantic
D_FLAGS		+= -fno-omit-frame-pointer
else
SRC			+= $(SRC_DIR)main.cpp
endif
ifeq ($(S), 0)
#MAKEFLAGS	+= --debug
OBJS		:= $(SRC)
else
#------ CODE FOR OBJECT FILES ------#
OBJS := $(addprefix $(BUILD_DIR), $(notdir $(SRC:%.cpp=%.o)))
# The `vpath` directive in a Makefile is used to specify a list of directories
# that `make` should search when it's looking for prerequisites.
vpath %.cpp $(sort $(dir $(SRC)))
DEPS		:= $(OBJS:.o=.d)
#------ INCLUDE SANATIZER FLAGS ------#
D_FLAGS		+= -O0 -g3 #-Og optimization + good debuggin experience
D_FLAGS		+= -fsanitize=address,undefined,vptr
endif

#-------------------- RULES ----------------------------#
all: $(NAME)

$(NAME): $(OBJS)
ifneq ($(S), 0)
	@printf "$(LF)\nüöÄ $(P_BLUE)Successfully Created $(P_YELLOW)$(NAME)'s Object files üöÄ$(FG_TEXT)\n"
endif
	@printf "\n"
	@printf "$(LF)üìö $(P_BLUE)Create $(P_GREEN)$@ üìö\n"
	@echo $(GREEN)
	@printf "$(CXX) $(D_FLAGS) $(INCLUDES) $(P_YELLOW) $^ $(P_GREEN) -o $@ $(FG_TEXT) \n\n";
	@$(CXX) $(D_FLAGS) $(INCLUDES) $^ -o $(NAME)
	@printf "\n$(LF)üéâ $(P_BLUE)Successfully Created $(P_GREEN)$@! üéâ\n$(P_NC)"
	@echo $(BANNER)

ifneq ($(S), 0)
$(OBJS): $(BUILD_DIR)%.o : %.cpp | $(BUILD_DIR)
	@$(CXX) $(D_FLAGS) $(INCLUDES) -MMD -MP -c $< -o $@
	@printf "$(LF)üöß $(P_BLUE)Creating $(P_YELLOW)$@ $(P_BLUE)from $(P_YELLOW) $< $(FG_TEXT)"

$(BUILD_DIR):
	@mkdir -p $@
endif

clean:
	@echo $(RED)
	@if [ -d "$(BUILD_DIR)" ]; then	\
		rm -rf $(BUILD_DIR); 		\
		printf "$(LF)üßπüóëÔ∏è $(P_RED) Clean $(P_YELLOW)$(NAME)'s Object files$(P_NC)\n"; \
	fi
	@if [ -d "$(DEBUG_DIR)" ]; then	\
		rm -rf $(DEBUG_DIR); 		\
	fi
	@printf  "\n$(P_NC)"

fclean: clean
	@if [ -f "$(NAME)" ]; then	\
		printf "$(LF)üßπüóëÔ∏è $(P_RED) Clean $(P_GREEN) $(CURRENT)/$(NAME)\n";	\
		rm -rf $(NAME);														\
		echo $(TRASH_BANNER);												\
	else																	\
		printf "$(LF)üßπüóëÔ∏è $(P_RED) Clean $(P_GREEN) $(CURRENT)\n";			\
	fi
	@printf "\n$(P_NC)"

re: fclean all

.PHONY: all re fclean clean 
#------------- TEST UTILS -----------------------------------#
test:$(NAME)
	@echo $(BOLD) $(CYAN) ./$(NAME) $(E_NC) "\n"
	@./$(NAME)
# ATTENTION !!!!!!!!!!!!!!  USE WITH S=0 !
leaks: $(NAME)
	@echo $(RED)$(MAC_LEAKS) ./$(NAME) $(E_NC)  "\n"
	@$(MAC_LEAKS) ./$(NAME)
	@echo "\n"

val: $(NAME)
	@echo $(RED) $(VALGRIND) ./$(NAME) $(E_NC) "\n"
	@$(VALGRIND) ./$(NAME)
	@echo "\n"

# #-------------------- GIT UTILS ----------------------------#
dirs:
	@echo GIT_REPO:  $(CYAN) $(GIT_REPO) $(E_NC)
	@echo PROJECT_ROOT: $(CYAN) $(PROJECT_ROOT) $(E_NC)
	@echo DIRS: $(BOLD) $(DIRS) "\n" $(E_NC)
	@echo CURRENT: $(GREEN) $(CURRENT) $(E_NC)
	@echo SRC: $(YELLOW) $(SRC) $(E_NC)
	@echo OBJS: $(GRAY) $(OBJS) $(E_NC)
testAll:
	@for dir in $(DIRS); do \
		$(MAKE) -C $$dir D=$(D) test; \
	done
cleanAll:
	@for dir in $(DIRS); do \
		$(MAKE) -C $$dir fclean; \
	done
gAdd:
	@echo $(CYAN) && git add $(PROJECT_ROOT)
gCommit:
	@echo $(GREEN) && git commit -e ; \
	ret=$$?; \
		echo $(RED) "Error in commit message"; \
		exit 1; \
	fi
gPush:
	@echo $(YELLOW) && git push ; \
	ret=$$? ; \
	if [ $$ret -ne 0 ]; then \
		echo $(RED) "git push failed, setting upstream branch" $(YELLOW) && \
		git push --set-upstream origin $(shell git branch --show-current) || \
		if [ $$? -ne 0 ]; then \
			echo $(RED) "git push --set-upstream failed with error" $(E_NC); \
			exit 1; \
		fi \
	fi
git:
	@if [ -f "$(GIT_REPO)/Makefile" ] && [ -d "$(GIT_REPO)/.git" ]; then \
		$(MAKE) -C "$(GIT_REPO)" git; \
	else \
		$(MAKE) -C "$(PROJECT_ROOT)/$(CURRENT)" cleanAll gAdd gCommit gPush; \
	fi
quick: cleanAll
	@echo $(GREEN) && git commit -am "* Update in files: "; \
	ret=$$? ; \
	if [ $$ret -ne 0 ]; then \
		exit 1; \
	else \
		$(MAKE) -C . gPush; \
	fi
soft:
	@if [ -f "$(GIT_REPO)/Makefile" ]; then	\
		$(MAKE) -C $(GIT_REPO) soft || \
		if [ $$? -ne 0 ]; then \
		echo $(RED) GIT_REPO not found $(E_NC); \
	fi
cpp: # Usage: make cpp h=filename
	@if [ ! -d "src" ]; then \
		mkdir src; \
		printf "#include <iostream>\n\nint main(void)\n {\n\n\treturn (0);\n}\n" > src/main.cpp; \
		echo "src/main.cpp was created"; \
	fi
	@if [ ! -d "include" ]; then \
		mkdir include; \
	fi
	@if [ ! -f "include/$(h).hpp" ]; then \
		printf "#ifndef $(shell echo $(h) | tr a-z A-Z)_HPP\n#define $(shell echo $(h) | tr a-z A-Z)_HPP\n\nclass $(h)\n{\n\tpublic:\n\t$(h)();\n\t~$(h)();\n};\n\n#endif // $(shell echo $(h) | tr a-z A-Z)_HPP\n" > include/$(h).hpp; \
		echo "include/$(h).hpp was created"; \
	fi
	@for file in include/*.hpp; do \
		if [ ! -f "src/$$(basename "$${file%.*}").cpp" ]; then \
			printf "#include \"$${file}\"\n\n$(h)::$(h)()\n{\n\n}\n\n$(h)::~$(h)()\n{\n\n}\n" > src/$$(basename "$${file%.*}").cpp; \
			echo "src/$$(basename "$${file%.*}").cpp was created"; \
		fi; \
	done
	@echo "Content:"; find . -type f \( -name "*.cpp" -o -name "*.hpp" \)
#--------------------COLORS----------------------------#
# For print
CL_BOLD  = \e[1m
RAN	  = \033[48;5;237m\033[38;5;255m
NC	   = \033[m
P_RED	= \e[1;91m
P_GREEN  = \e[1;32m
P_BLUE   = \e[0;36m
P_YELLOW = \e[1;33m
P_CCYN   = \e[0;1;36m
P_NC	 = \e[0m
LF	   = \e[1K\r$(P_NC)
FG_TEXT  = $(P_NC)\e[38;2;189;147;249m
# For bash echo
CLEAR  = "\033c"
BOLD   = "\033[1m"
CROSS  = "\033[8m"
E_NC   = "\033[m"
RED	= "\033[1;31m"
GREEN  = "\033[1;32m"
YELLOW = "\033[1;33m"
BLUE   = "\033[1;34m"
MAG	= "\033[1;35m"
CYAN   = "\033[0;1;36m"
GRAY   = "\033[1;90m"
BANNER = "$$CPP"
TRASH_BANNER = "$$TRASH"

define CPP

		$(RAN)‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚¢ü‚°ã‚£á‚†ß‚£π‚¢∞‚°õ‚°ª‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø$(NC)
		$(RAN)‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚°ü‚£ç‚°ö‚¢¶‚°π‚£∞‚°ô‚¢¶‚¢£‚¢ù‚°∏‚°Ö‚¢Ø‚°õ‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø$(NC)
		$(RAN)‚£ø‚£ø‚£ø‚£ø‚¢ø‚°ã‚¢ß‚¢£‚†≥‚£å‚£ì‚¢£‚°ï‚¢¶‚°ô‚¢Æ‚¢ú‚£ä‚†∂‚°ô‚¢¶‚°π‚¢ú‚°™‚¢ù‚°ª‚£ø‚£ø‚£ø‚£ø$(NC)
		$(RAN)‚£ø‚¢ü‚°ç‚¢é‚°ñ‚†≠‚°é‚£ï‚¢´‚°î‚¢Æ‚£ë‚£™‚£•‚£ø‚£¨‚£∂‚£ç‚£ñ‚°π‚¢Ü‚°≥‚£©‚¢ú‚¢£‚¢é‚†µ‚£©‚¢õ‚¢ø$(NC)
		$(RAN)‚£ô‚†≤‚°ú‚££‚¢ö‚°µ‚¢©‚°í‚£ß‚£º‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ß‚£ß‚°±‚¢é‚°£‚¢é‚°≥‚†ú‚†ò‚†ò$(NC)
		$(RAN)‚£å‚†≥‚£ç‚†ñ‚££‚†é‚£á‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚£ã‚†º‚†Å‚†Å‚†Ä‚†Ä‚†Ä$(NC)
		$(RAN)‚£å‚†≥‚£¨‚°ô‚¢¶‚£π‚£ø‚£ø‚£ø‚£ø‚£ø‚¢ü‚°õ‚¢ß‚°π‚†ú‚£ú‚†ª‚°ª‚£ø‚°ø‚†ü‚†ã‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä$(NC)
		$(RAN)‚£å‚†≥‚°Ü‚°ù‚¢¶‚£Ω‚£ø‚£ø‚£ø‚£ø‚†ü‚¢¶‚°ô‚¢¶‚°ì‚¢Ω‚°®‚†ì‚†Å‚†â‚†Ä‚†Ä‚†Ä‚£Ä‚†Ä‚†Ä‚†Ä‚£Ä‚†Ä‚†Ä$(NC)
		$(RAN)‚£å‚¢≥‚°©‚¢û‚£°‚£ø‚£ø‚£ø‚£ø‚£ø‚£ô‚¢¶‚°ô‚†¶‚†ô‚†Ç‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†∞‚†∂‚£ø‚†∂‚†Ä‚†∂‚£ø‚†∂‚†Ä$(NC)
		$(RAN)‚£å‚†≥‚£å‚°ì‚¢¶‚¢ª‚£ø‚£ø‚£ø‚£ø‚£é‚†í‚†â‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°Ä‚†Ä‚†Ä‚†Ä‚†â‚†Ä‚†Ä‚†Ä‚†â‚†Ä‚†Ä$(NC)
		$(RAN)‚£å‚†≥‚£¨‚†π‚£å‚¢ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£¶‚£Ñ‚°Ä‚†Ä‚†Ä‚†Ä‚£Ä‚£¥‚£ø‚£∑‚£¶‚£Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä$(NC)
		$(RAN)‚£å‚†≥‚¢Ü‚°õ‚†å‚†Ä‚†à‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä$(NC)
		$(RAN)‚°®‚†ã‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ô‚†ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ø‚†ã‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä$(NC)
		$(RAN)‚£ø‚£¶‚£Ñ‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚†ô‚†õ‚†õ‚†õ‚†õ‚†ã‚†â‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£Ä‚£¥‚£ø$(NC)
		$(RAN)‚£ø‚£ø‚£ø‚£ø‚£∂‚£§‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£†‚£∂‚£ø‚£ø‚£ø‚£ø$(NC)
		$(RAN)‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚£¶‚£Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚£¥‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø$(NC)
		$(RAN)‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∂‚£Ñ‚°Ä‚†Ä‚†Ä‚¢Ä‚£†‚£∂‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø$(NC)

endef
export CPP

define TRASH

		$(RAN)‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø$(NC)
		$(RAN)‚£ø‚£ø‚£ø‚£ø‚£ø‚°ü‚†ª‚†ø‚£õ‚°õ‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø$(NC)
		$(RAN)‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∂‚£∂‚£¨‚£ç‚£ô‚¢ª‚£ø‚£ø‚£ø‚£ø‚£ø$(NC)
		$(RAN)‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚†Ä‚°Ñ‚¢†‚†Ä‚°§‚†Ä‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø$(NC)
		$(RAN)‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚†Ä‚°á‚¢∏‚†Ä‚°á‚†Ä‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø$(NC)
		$(RAN)‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†Ä‚£∑‚¢∏‚†Ä‚°á‚¢∞‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø$(NC)
		$(RAN)‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£á‚£à‚£à‚£Ä‚£Å‚£º‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø$(NC)
		$(RAN)‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø$(NC)
		$(RAN)‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø$(NC)
endef
export TRASH